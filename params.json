{
  "name": "Arrow",
  "tagline": "Elegant JSON Parsing in Swift :tophat:",
  "body": "# Arrow üèπ - *Elegant JSON Parsing in Swift*\r\n\r\n[![Language: Swift 2](https://img.shields.io/badge/language-swift2-f48041.svg?style=flat)](https://developer.apple.com/swift)\r\n![Platform: iOS 8+](https://img.shields.io/badge/platform-iOS%208%2B-blue.svg?style=flat)\r\n[![Carthage compatible](https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat)](https://github.com/Carthage/Carthage)\r\n[![Cocoapods compatible](https://img.shields.io/badge/Cocoapods-compatible-4BC51D.svg?style=flat)](https://cocoapods.org)\r\n[![Build Status](https://www.bitrise.io/app/ffd8fe5df34624ff.svg?token=IahWn-RB5hTWzvBbcIktsQ)](https://www.bitrise.io/app/ffd8fe5df34624ff)\r\n[![codebeat badge](https://codebeat.co/badges/2acb8664-02f7-463d-9de2-2be9e87ba17c)](https://codebeat.co/projects/github-com-s4cha-arrow)\r\n[![License: MIT](http://img.shields.io/badge/license-MIT-lightgrey.svg?style=flat)](https://github.com/s4cha/Arrow/blob/master/LICENSE)\r\n[![Release version](https://img.shields.io/badge/release-2.0-blue.svg)]()\r\n\r\n\r\n[Reason](#reason) - [Example](#example) - [Installation](#installation)\r\n\r\n\r\n```swift\r\nidentifier <-- json[\"id\"]\r\nname <-- json[\"name\"]\r\nstats <-- json[\"stats\"]\r\n```\r\n\r\n## Reason\r\n### Why\r\nBecause parsing JSON in Swift is full of **unecessary if lets, obvious casts and nil-checks**  \r\n*There must be a better way*\r\n\r\n## How\r\nBy using a simple arrow operator that takes care of the boilerplate code for us.  \r\nJson mapping code becomes **concise** and **maintainable** ‚ù§Ô∏è\r\n\r\n\r\n## What\r\n- [x] Simple & Lightweight (~200lines)\r\n- [x] Pure Swift\r\n- [x] Leaves your models clean\r\n- [x] Implicitly casts JSON values to the right types in your model\r\n- [x] Automatic NSDate, NSURL, Enum, Custom model Parsing\r\n- [x] Converts string values to numeric types in your model\r\n- [x] Does not crash if JSON key is not there, nor returns nil, it simply doesn't do anything\r\n- [x] No overly complex obscure functional chaining operator overloading voodoo magic ?==:>>><> üòÖ\r\n\r\n\r\n## Example\r\n\r\n### Swift Model\r\n```swift\r\nstruct Profile {\r\n    var identifier = 0\r\n    var name = \"\"\r\n    var link:NSURL?\r\n    var weekday:WeekDay = .Monday\r\n    var stats = Stats()\r\n    var phoneNumbers = [PhoneNumber]()\r\n}\r\n```\r\n### JSON File\r\n```json\r\n{\r\n    \"id\": 15678,\r\n    \"name\": \"John Doe\",\r\n    \"link\": \"https://apple.com/steve\",\r\n    \"weekdayInt\" : 3,\r\n    \"stats\": {\r\n        \"numberOfFriends\": 163,\r\n        \"numberOfFans\": 10987\r\n    },\r\n    \"phoneNumbers\": [{\r\n                     \"label\": \"house\",\r\n                     \"number\": \"9809876545\"\r\n                     }, {\r\n                     \"label\": \"cell\",\r\n                     \"number\": \"0908070656\"\r\n                     }, {\r\n                     \"label\": \"work\",\r\n                     \"number\": \"0916570656\"\r\n    }]\r\n}\r\n```\r\n\r\n### Before (Chaos)\r\n```swift\r\nvar profile = Profile()\r\n\r\n// Int\r\nif let id = json[\"id\"] as? Int {\r\n    profile.identifier = id\r\n}  \r\n// String\r\nif let name = json[\"name\"] as? String {\r\n    profile.name = name\r\n}\r\n// NSURL\r\nif let link = json[\"link\"] as? String, url = NSURL(string:link)  {\r\n    profile.link = link\r\n}\r\n// Enum\r\nif let weekdayInt = json[\"weekdayInt\"] as? Int, weekday = WeekDay(rawValue:weekdayInt) {\r\n    profile.weekday = weekday\r\n}\r\n// Custom nested object\r\nif let statsJson = json[\"stats\"] as? AnyObject {\r\n    if let numberOfFans = statsJson[\"numberOfFans\"] as? Int {\r\n        profile.stats.numberOfFans = numberOfFans\r\n    }\r\n    if let numberOfFriends = statsJson[\"numberOfFriends\"] as? Int {\r\n        profile.stats.numberOfFriends = numberOfFriends\r\n    }\r\n}\r\n// Array of custom nested object\r\nif let pns = json[\"phoneNumbers\"] as? [AnyObject] {\r\n    for pn in pns {\r\n        phoneNumbers.append(PhoneNumber(json: pn))\r\n    }\r\n}\r\n```\r\n\r\n### After  üéâüéâüéâ\r\n```swift\r\nextension Profile:ArrowParsable {\r\n    mutating func deserialize(json: JSON) {\r\n        identifier <-- json[\"id\"]\r\n        link <-- json[\"link\"]\r\n        name <-- json[\"name\"]\r\n        weekday <-- json[\"weekdayInt\"]\r\n        stats <- json[\"stats\"]\r\n        phoneNumbers <-- json[\"phoneNumbers\"]\r\n    }\r\n}\r\n```\r\n\r\n### Usage\r\n```swift\r\nlet profile = Profile()\r\nprofile.deserialize(json)\r\n```\r\n\r\n## Installation\r\n#### Carthage\r\n```\r\ngithub \"s4cha/Arrow\"\r\n```\r\n#### CocoaPods\r\n```\r\npod 'Arrow'\r\nuse_frameworks!\r\n```\r\n\r\n#### Manually\r\nSimply Copy and Paste Arrow.swift in your Xcode Project :)\r\nhttps://github.com/s4cha/Arrow/blob/master/Arrow.swift\r\n\r\n#### As A Framework\r\nGrab this repository and build the Framework target on the example project. Then Link against this framework.\r\n\r\n\r\n## How Does That Work\r\n\r\nNotice earlier we typed :\r\n\r\n```swift\r\nstats <-- json[\"stats\"]\r\n```\r\nThat's because we created and extension \"Stats+Arrow.swift\" enabling us to use the Arrow Operator\r\n\r\n```swift\r\n//  Stats+Arrow.swift\r\n\r\nimport Foundation\r\n\r\nextension Stats:ArrowParsable {\r\n    mutating func deserialize(json: JSON) {\r\n        numberOfFriends <-- json[\"numberOfFriends\"]\r\n        numberOfFans <-- json[\"numberOfFans\"]\r\n    }\r\n}\r\n```\r\n\r\n## Flexible you said\r\n\r\n- DO I have to use the <-- for my sub models\r\n- Nope, you could write it like so if you wanted :\r\n\r\n```swift\r\nstats.numberOfFriends <-- json[\"stats.numberOfFriends\"]\r\nstats.numberOfFans <-- json[\"stats.numberOfFans\"]\r\n```\r\n\r\n- Hey I don't want to parse NSDates in every files, do you have something for me?\r\n\r\n\r\nSure, just set your date format once and you're done.\r\n\r\n```swift\r\n// Configure NSDate Parsing\r\nArrow.setDateFormat(\"yyyy-MM-dd'T'HH:mm:ssZZZZZ\")\r\nArrow.setUseTimeIntervalSinceReferenceDate(true)\r\n\r\n// Dates can be parsed form custom date format or timestamp\r\nlet json:JSON = JSON([\"date\": \"2013-06-07T16:38:40+02:00\", \"timestamp\": 392308720])\r\ndate1 <-- json[\"date\"]\r\ndate2 <-- json[\"timestamp\"]\r\n```\r\n\r\nWhat if I want a Custom NSDate format for a specific key ?\r\n```swift\r\ncreatedAt <-- json[\"created_at\"]?.dateFormat(\"yyyy-MM-dd'T'HH:mm:ssZZZZZ\")\r\n```\r\nJust provide it on a case per case basis ! üéâ\r\n\r\n## Accessing JSON values\r\n\r\n### Nested values\r\n\r\n```swift\r\nvalue <-- json[\"nested.nested.nested.nestedValue\"]\r\n```\r\n\r\n### Object at index\r\n```swift\r\nvalue <-- json[12]\r\n```\r\n\r\n### Combine both\r\n```swift\r\nvalue <-- json[1]?[\"someKey\"]?[2]?[\"something.other\"]\r\n```\r\n\r\n### Looping on Array\r\n```swift\r\nif let collection = json.collection {\r\n    for jsonEntry in collection {\r\n        //Do something\r\n    }\r\n}\r\n```\r\n\r\n\r\n## Acknoledgments\r\nThis wouldn't exist without [YannickDot](https://github.com/YannickDot), [Damien-nd](https://github.com/damien-nd) and [maxkonovalov](https://github.com/maxkonovalov)\r\n\r\n\r\n## Other repos ‚ù§Ô∏è\r\nArrow is part of a series of lightweight libraries aiming to make developing iOS Apps a *breeze* :\r\n- Layout : [Stevia](https://github.com/s4cha/Stevia)\r\n- Async code : [then](https://github.com/s4cha/then)\r\n- JSON WebServices : [ws](https://github.com/s4cha/ws)\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}